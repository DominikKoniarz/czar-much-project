// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                String              @id @default(uuid())
    name              String
    email             String
    emailVerified     Boolean
    image             String?
    createdAt         DateTime
    updatedAt         DateTime
    sessions          Session[]
    accounts          Account[]
    Device            Device[]
    SolarInstallation SolarInstallation[]

    @@unique([email])
    @@map("user")
}

model Session {
    id        String   @id
    expiresAt DateTime
    token     String
    createdAt DateTime
    updatedAt DateTime
    ipAddress String?
    userAgent String?
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([token])
    @@map("session")
}

model Account {
    id                    String    @id
    accountId             String
    providerId            String
    userId                String
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime
    updatedAt             DateTime

    @@map("account")
}

model Device {
    id                          String   @id @default(uuid())
    name                        String   @db.VarChar(255)
    enabled                     Boolean
    enableOnlyAboveProductionKw Float    @default(0.0) // in kW - only enable if solar production is above this value
    userId                      String
    user                        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt                   DateTime @default(now())
    updatedAt                   DateTime @updatedAt

    measurements DeviceMeasurement[]

    @@map("device")
}

model DeviceMeasurement {
    id               String   @id @default(uuid())
    deviceId         String
    hourIndex        Int // 0-23 for each hour of the day
    hourEnergyFlowWh Float // in kWh - energy that has flowed through the device in the hour
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
    device           Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)

    @@map("measurement")
}

model SolarInstallation {
    id           String   @id @default(uuid())
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    name         String
    totalPowerKw Float // in kW - total power of the solar installation
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    panelCount   Int

    production SolarInstallationProduction[]

    @@map("solar_installation")
}

model SolarInstallationProduction {
    id                String            @id @default(uuid())
    installationId    String
    hourIndex         Int // 0-23 for each hour of the day
    producedEnergyKWh Float // in kWh
    installation      SolarInstallation @relation(fields: [installationId], references: [id], onDelete: Cascade)
    createdAt         DateTime          @default(now())
    updatedAt         DateTime          @updatedAt

    @@map("solar_installation_production")
}
